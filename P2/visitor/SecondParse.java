//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import visitor.sample.Argument;
import visitor.sample.Pair;
import visitor.sample.TypeIdentifier;
import java.util.*;


/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class SecondParse<string,Argument> extends GJDepthFirst<string,sample.Argument> {

	// Hash map of Class -> Set 
	HashMap<String, HashSet<TypeIdentifier>> ref = sample.ref;
	// Hash map of (function,Class) -> Set 
	HashMap<sample.Pair, HashSet<TypeIdentifier>> scope = sample.scope;
	// Derived Class -> Parent Class 
	HashMap<String, String> par = sample.par;

	//
	// Auto class visitors--probably don't need to be overridden.
	//

	public string visit(NodeList n, sample.Argument argu) {
		string _ret=null;
		int _count=0;
		for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
			e.nextElement().accept(this,argu);
			_count++;
		}
		return _ret;
	}

	public string visit(NodeListOptional n, sample.Argument argu) {
		if ( n.present() ) {
			string _ret=null;
			int _count=0;
			for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
				e.nextElement().accept(this,argu);
				_count++;
			}
			return _ret;
		}
		else
			return null;
	}

	public string visit(NodeOptional n, sample.Argument argu) {
		if ( n.present() )
			return n.node.accept(this,argu);
		else
			return null;
	}

	public string visit(NodeSequence n, sample.Argument argu) {
		string _ret=null;
		int _count=0;
		for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
			e.nextElement().accept(this,argu);
			_count++;
		}
		return _ret;
	}

	public string visit(NodeToken n, sample.Argument argu) { return null; }

	//
	// User-generated visitor methods below
	//

	/**
	 * f0 -> MainClass()
	 * f1 -> ( TypeDeclaration() )*
	 * f2 -> <EOF>
	 */
	public string visit(Goal n, sample.Argument argu) {
		string _ret=null;
		//n.f0.accept(this, argu);
		n.f1.accept(this, argu);
		n.f2.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> "class"
	 * f1 -> Identifier()
	 * f2 -> "{"
	 * f3 -> "public"
	 * f4 -> "static"
	 * f5 -> "void"
	 * f6 -> "main"
	 * f7 -> "("
	 * f8 -> "String"
	 * f9 -> "["
	 * f10 -> "]"
	 * f11 -> Identifier()
	 * f12 -> ")"
	 * f13 -> "{"
	 * f14 -> PrintStatement()
	 * f15 -> "}"
	 * f16 -> "}"
	 */
	public string visit(MainClass n, sample.Argument argu) {
		string _ret=null;
		n.f0.accept(this, argu);
		n.f1.accept(this, argu);
		n.f2.accept(this, argu);
		n.f3.accept(this, argu);
		n.f4.accept(this, argu);
		n.f5.accept(this, argu);
		n.f6.accept(this, argu);
		n.f7.accept(this, argu);
		n.f8.accept(this, argu);
		n.f9.accept(this, argu);
		n.f10.accept(this, argu);
		n.f11.accept(this, argu);
		n.f12.accept(this, argu);
		n.f13.accept(this, argu);
		n.f14.accept(this, argu);
		n.f15.accept(this, argu);
		n.f16.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> ClassDeclaration()
	 *       | ClassExtendsDeclaration()
	 */
	public string visit(TypeDeclaration n, sample.Argument argu) {
		string _ret=null;
		n.f0.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> "class"
	 * f1 -> Identifier()
	 * f2 -> "{"
	 * f3 -> ( VarDeclaration() )*
	 * f4 -> ( MethodDeclaration() )*
	 * f5 -> "}"
	 */
	public string visit(ClassDeclaration n, sample.Argument argu) {
		string _ret=null;
		sample.Argument temp = new sample.Argument();
		// Store class Name yn=0(not in function)
		temp.yn = 0;
		temp.clsname = n.f1.f0.tokenImage;

		n.f4.accept(this, temp);
		return _ret;
	}

	/**
	 * f0 -> "class"
	 * f1 -> Identifier()
	 * f2 -> "extends"
	 * f3 -> Identifier()
	 * f4 -> "{"
	 * f5 -> ( VarDeclaration() )*
	 * f6 -> ( MethodDeclaration() )*
	 * f7 -> "}"
	 */
	public string visit(ClassExtendsDeclaration n, sample.Argument argu) {
		string _ret=null;
		sample.Argument temp = new sample.Argument();
		// Store class Name yn=0(not in function)
		temp.yn = 0;
		temp.clsname = n.f1.f0.tokenImage;
		n.f6.accept(this,temp);
		return _ret;
	}

	/**
	 * f0 -> Type()
	 * f1 -> Identifier()
	 * f2 -> ";"
	 */
	public string visit(VarDeclaration n, sample.Argument argu) {
		string _ret=null;
		n.f0.accept(this, argu);
		n.f1.accept(this, argu);
		n.f2.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> "public"
	 * f1 -> Type()
	 * f2 -> Identifier()
	 * f3 -> "("
	 * f4 -> ( FormalParameterList() )?
	 * f5 -> ")"
	 * f6 -> "{"
	 * f7 -> ( VarDeclaration() )*
	 * f8 -> ( Statement() )*
	 * f9 -> "return"
	 * f10 -> Expression()
	 * f11 -> ";"
	 * f12 -> "}"
	 */
	public string visit(MethodDeclaration n, sample.Argument argu) {
		string _ret=null;
		sample.Argument temp = new sample.Argument();

		temp.yn = 1;
		temp.clsname = argu.clsname;
		temp.name = n.f2.f0.tokenImage;
		n.f8.accept(this, temp);
		checkType(n.f1.accept(this,temp).toString(),n.f10.accept(this,temp).toString());
		return _ret;
	}

	/**
	 * f0 -> FormalParameter()
	 * f1 -> ( FormalParameterRest() )*
	 */
	public string visit(FormalParameterList n, sample.Argument argu) {
		string _ret=null;
		n.f0.accept(this, argu);
		n.f1.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> Type()
	 * f1 -> Identifier()
	 */
	public string visit(FormalParameter n, sample.Argument argu) {
		string _ret=null;
		n.f0.accept(this, argu);
		n.f1.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> ","
	 * f1 -> FormalParameter()
	 */
	public string visit(FormalParameterRest n, sample.Argument argu) {
		string _ret=null;
		n.f0.accept(this, argu);
		n.f1.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> ArrayType()
	 *       | BooleanType()
	 *       | IntegerType()
	 *       | Identifier()
	 */
	public string visit(Type n, sample.Argument argu) {
		string _ret=null;
		return n.f0.accept(this, argu);
	}

	/**
	 * f0 -> "int"
	 * f1 -> "["
	 * f2 -> "]"
	 */
	public string visit(ArrayType n, sample.Argument argu) {
		string _ret=null;
		return (string) "int[]";
	}

	/**
	 * f0 -> "boolean"
	 */
	public string visit(BooleanType n, sample.Argument argu) {
		string _ret=null;
		return (string) n.f0.tokenImage;
	}

	/**
	 * f0 -> "int"
	 */
	public string visit(IntegerType n, sample.Argument argu) {
		string _ret=null;
		n.f0.accept(this, argu);
		return (string) n.f0.tokenImage;
	}

	/**
	 * f0 -> Block()
	 *       | AssignmentStatement()
	 *       | ArrayAssignmentStatement()
	 *       | IfStatement()
	 *       | WhileStatement()
	 *       | PrintStatement()
	 */
	public string visit(Statement n, sample.Argument argu) {
		string _ret=null;
		return n.f0.accept(this, argu);
	}

	/**
	 * f0 -> "{"
	 * f1 -> ( Statement() )*
	 * f2 -> "}"
	 */
	public string visit(Block n, sample.Argument argu) {
		string _ret=null;
		return n.f1.accept(this, argu);
	}

	/**
	 * f0 -> Identifier()
	 * f1 -> "="
	 * f2 -> Expression()
	 * f3 -> ";"
	 */
	public string visit(AssignmentStatement n, sample.Argument argu) {
		string _ret=null;
		checkType(n.f0.accept(this, argu).toString(),n.f2.accept(this, argu).toString());
		return _ret;
	}

	/**
	 * f0 -> Identifier()
	 * f1 -> "["
	 * f2 -> Expression()
	 * f3 -> "]"
	 * f4 -> "="
	 * f5 -> Expression()
	 * f6 -> ";"
	 */
	public string visit(ArrayAssignmentStatement n, sample.Argument argu) {
		string _ret=null;
		n.f0.accept(this, argu);
		n.f1.accept(this, argu);
		n.f2.accept(this, argu);
		n.f3.accept(this, argu);
		n.f4.accept(this, argu);
		n.f5.accept(this, argu);
		n.f6.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> IfthenElseStatement()
	 *       | IfthenStatement()
	 */
	public string visit(IfStatement n, sample.Argument argu) {
		string _ret=null;
		n.f0.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> "if"
	 * f1 -> "("
	 * f2 -> Expression()
	 * f3 -> ")"
	 * f4 -> Statement()
	 */
	public string visit(IfthenStatement n, sample.Argument argu) {
		string _ret=null;
		checkType("boolean",n.f2.accept(this, argu).toString());
		n.f4.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> "if"
	 * f1 -> "("
	 * f2 -> Expression()
	 * f3 -> ")"
	 * f4 -> Statement()
	 * f5 -> "else"
	 * f6 -> Statement()
	 */
	public string visit(IfthenElseStatement n, sample.Argument argu) {
		string _ret=null;
		checkType("boolean",n.f2.accept(this, argu).toString());
		n.f4.accept(this, argu);
		n.f6.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> "while"
	 * f1 -> "("
	 * f2 -> Expression()
	 * f3 -> ")"
	 * f4 -> Statement()
	 */
	public string visit(WhileStatement n, sample.Argument argu) {
		string _ret=null;
		checkType("boolean",n.f2.accept(this, argu).toString());
		n.f4.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> "System.out.println"
	 * f1 -> "("
	 * f2 -> Expression()
	 * f3 -> ")"
	 * f4 -> ";"
	 */
	public string visit(PrintStatement n, sample.Argument argu) {
		string _ret=null;
		n.f2.accept(this, argu);
		return _ret;
	}

	/**
	 * f0 -> OrExpression()
	 *       | AndExpression()
	 *       | CompareExpression()
	 *       | neqExpression()
	 *       | PlusExpression()
	 *       | MinusExpression()
	 *       | TimesExpression()
	 *       | DivExpression()
	 *       | ArrayLookup()
	 *       | ArrayLength()
	 *       | MessageSend()
	 *       | PrimaryExpression()
	 */
	public string visit(Expression n, sample.Argument argu) {
		string _ret=null;
		return n.f0.accept(this, argu);
	}

	/**
	 * f0 -> PrimaryExpression()
	 * f1 -> "&&"
	 * f2 -> PrimaryExpression()
	 */
	public string visit(AndExpression n, sample.Argument argu) {
		string _ret=null;
		String r1 = n.f0.accept(this, argu).toString();
		//n.f2.accept(this, argu);
		return (string) r1;
	}

	/**
	 * f0 -> PrimaryExpression()
	 * f1 -> "||"
	 * f2 -> PrimaryExpression()
	 */
	public string visit(OrExpression n, sample.Argument argu) {
		string _ret=null;
		String r1 = n.f0.accept(this, argu).toString();
//		n.f2.accept(this, argu);
		return (string) r1;
	}

	/**
	 * f0 -> PrimaryExpression()
	 * f1 -> "<="
	 * f2 -> PrimaryExpression()
	 */
	public string visit(CompareExpression n, sample.Argument argu) {
		string _ret=null;
		String r1 = n.f0.accept(this, argu).toString();
//		n.f2.accept(this, argu);
		return (string) r1;
	}

	/**
	 * f0 -> PrimaryExpression()
	 * f1 -> "!="
	 * f2 -> PrimaryExpression()
	 */
	public string visit(neqExpression n, sample.Argument argu) {
		string _ret=null;
		String r1 = n.f0.accept(this, argu).toString();
//		n.f2.accept(this, argu);
		return (string) r1;
	}

	/**
	 * f0 -> PrimaryExpression()
	 * f1 -> "+"
	 * f2 -> PrimaryExpression()
	 */
	public string visit(PlusExpression n, sample.Argument argu) {
		string _ret=null;
		String r1 = n.f0.accept(this, argu).toString();
//		n.f2.accept(this, argu);
		return (string) r1;
	}

	/**
	 * f0 -> PrimaryExpression()
	 * f1 -> "-"
	 * f2 -> PrimaryExpression()
	 */
	public string visit(MinusExpression n, sample.Argument argu) {
		string _ret=null;
		String r1 = n.f0.accept(this, argu).toString();
//		n.f2.accept(this, argu);
		return (string) r1;
	}

	/**
	 * f0 -> PrimaryExpression()
	 * f1 -> "*"
	 * f2 -> PrimaryExpression()
	 */
	public string visit(TimesExpression n, sample.Argument argu) {
		string _ret=null;
		String r1 = n.f0.accept(this, argu).toString();
//		n.f2.accept(this, argu);
		return (string) r1;
	}

	/**
	 * f0 -> PrimaryExpression()
	 * f1 -> "/"
	 * f2 -> PrimaryExpression()
	 */
	public string visit(DivExpression n, sample.Argument argu) {
		string _ret=null;
		String r1 = n.f0.accept(this, argu).toString();
//		n.f2.accept(this, argu);
		return (string) r1;
	}

	/**
	 * f0 -> PrimaryExpression()
	 * f1 -> "["
	 * f2 -> PrimaryExpression()
	 * f3 -> "]"
	 */
	public string visit(ArrayLookup n, sample.Argument argu) {
		string _ret=null;
		String r1 = n.f0.accept(this, argu).toString();
//		n.f2.accept(this, argu);
		return (string) r1;
	}

	/**
	 * f0 -> PrimaryExpression()
	 * f1 -> "."
	 * f2 -> "length"
	 */
	public string visit(ArrayLength n, sample.Argument argu) {
		string _ret=null;
		String r1 = n.f0.accept(this, argu).toString();
//		n.f2.accept(this, argu);
		return (string) r1;
	}

	/**
	 * f0 -> PrimaryExpression()
	 * f1 -> "."
	 * f2 -> Identifier()
	 * f3 -> "("
	 * f4 -> ( ExpressionList() )?
	 * f5 -> ")"
	 */
	public string visit(MessageSend n, sample.Argument argu) {
		string _ret=null;
		String r1 = n.f0.accept(this, argu).toString();
//		n.f2.accept(this, argu);
		return (string) r1;
	}

	/**
	 * f0 -> Expression()
	 * f1 -> ( ExpressionRest() )*
	 */
	public string visit(ExpressionList n, sample.Argument argu) {
		string _ret=null;
		String r1 = n.f0.accept(this, argu).toString();
//		n.f2.accept(this, argu);
		return (string) r1;
	}

	/**
	 * f0 -> ","
	 * f1 -> Expression()
	 */
	public string visit(ExpressionRest n, sample.Argument argu) {
		string _ret=null;
		String r1 = n.f0.accept(this, argu).toString();
//		n.f2.accept(this, argu);
		return (string) r1;
	}

	/**
	 * f0 -> IntegerLiteral()
	 *       | TrueLiteral()
	 *       | FalseLiteral()
	 *       | Identifier()
	 *       | ThisExpression()
	 *       | ArrayAllocationExpression()
	 *       | AllocationExpression()
	 *       | NotExpression()
	 *       | BracketExpression()
	 */
	public string visit(PrimaryExpression n, sample.Argument argu) {
		string _ret=null;
		return n.f0.accept(this, argu);
	}

	/**
	 * f0 -> <INTEGER_LITERAL>
	 */
	public string visit(IntegerLiteral n, sample.Argument argu) {
		string _ret=null;
		return (string) "int";
	}

	/**
	 * f0 -> "true"
	 */
	public string visit(TrueLiteral n, sample.Argument argu) {
		string _ret=null;
		return (string) "boolean";
	}

	/**
	 * f0 -> "false"
	 */
	public string visit(FalseLiteral n, sample.Argument argu) {
		string _ret=null;
		return (string) "boolean";
	}

	/**
	 * f0 -> <IDENTIFIER>
	 */
	public string visit(Identifier n, sample.Argument argu) {
		string _ret=null;
		if(argu == null)
			return _ret;
		return (string)typeIdentifier(argu,n.f0.tokenImage);
	}

	/**
	 * f0 -> "this"
	 */
	public string visit(ThisExpression n, sample.Argument argu) {
		string _ret=null;
		return (string) "int";
	}

	/**
	 * f0 -> "new"
	 * f1 -> "int"
	 * f2 -> "["
	 * f3 -> Expression()
	 * f4 -> "]"
	 */
	public string visit(ArrayAllocationExpression n, sample.Argument argu) {
		string _ret=null;
		checkType("int",n.f3.accept(this, argu).toString());
		return (string) "int[]";
	}

	/**
	 * f0 -> "new"
	 * f1 -> Identifier()
	 * f2 -> "("
	 * f3 -> ")"
	 */
	public string visit(AllocationExpression n, sample.Argument argu) {
		string _ret=null;
		return (string) n.f1.f0.tokenImage;
	}

	/**
	 * f0 -> "!"
	 * f1 -> Expression()
	 */
	public string visit(NotExpression n, sample.Argument argu) {
		string _ret=null;
		checkType("boolean", n.f1.accept(this,argu).toString());
		return (string) "boolean";
	}

	/**
	 * f0 -> "("
	 * f1 -> Expression()
	 * f2 -> ")"
	 */
	public string visit(BracketExpression n, sample.Argument argu) {
		string _ret=null;
		return n.f1.accept(this, argu);
	}

	/**
	 * f0 -> Identifier()
	 * f1 -> ( IdentifierRest() )*
	 */
	public string visit(IdentifierList n, sample.Argument argu) {
		string _ret=null;
		String r1 = n.f0.accept(this, argu).toString();
		n.f1.accept(this, argu);
		return (string) r1;
	}

	/**
	 * f0 -> ","
	 * f1 -> Identifier()
	 */
	public string visit(IdentifierRest n, sample.Argument argu) {
		string _ret=null;
		return n.f1.accept(this, argu);
	}

	private void checkType(String a,String b){
		if(a != b)
		{
			System.out.println("Type Error");
			System.exit(0);
		}
	}

	private String typeIdentifier(sample.Argument argu, String identifier) {
		// Indicator variable telling if var found or not
		int flag = 1;

		// Check current function for object
		Pair a = new Pair (argu.clsname, argu.name);
		HashSet<TypeIdentifier> set = scope.get(a);

		// If seeing map for first time
		String type;
		if(set!=null && (type = contains(set,identifier)) != null)
		{
			flag=0;
			return type;
		}


		//If not found, check classes recursively(in a do-while loop)
		if(flag==1){

			int found =  0;
			String cur_class= argu.clsname;

			do{

				HashSet<TypeIdentifier> abc = ref.get(cur_class);
				if (abc != null && (type = contains(abc,identifier)) != null){
					found = 1; 
					return type;
				}

				cur_class = par.get(cur_class);

			}while(found==0	&& cur_class!="Object");

			if(found==0){
				System.out.println("Type Error");
				System.exit(0);
			}

		}
		return null;
	}
	
	private String contains(HashSet<TypeIdentifier> set,String token)
	{
		for (TypeIdentifier s : set) {
			if(s.identifier == token)
				return s.type;
		}
		return null;
	}
}
